//
//  VbFactoryTransDao.m
//  Hpi-FDS
//
//  Created by 马 文培 on 12-7-6.
//  Copyright (c) 2012年 Landscape. All rights reserved.
//

#import "VbFactoryTransDao.h"
#import "VbFactoryTrans.h"
#import "PubInfo.h"

@implementation VbFactoryTransDao
static sqlite3 *database;

+(NSString  *) dataFilePath
{
	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
	NSString *documentsDirectory = [paths objectAtIndex:0];
	NSString *path = [documentsDirectory stringByAppendingPathComponent:@"database.db"];
	return	 path;
}

+(void) openDataBase
{	
	NSString *file=[self dataFilePath];
	if(sqlite3_open([file UTF8String],&database)!=SQLITE_OK)
	{
		sqlite3_close(database);
		NSLog(@"open VbFactoryTrans error");
		return;
	}
	NSLog(@"open VbFactoryTrans database succes ....");
}

+(void) initDb
{	
	char *errorMsg;
	NSString *createSql=[NSString  stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@",
						 @"CREATE TABLE IF NOT EXISTS VbFactoryTrans  (FACTORYCODE TEXT   ",
						 @",DISPATCHNO TEXt ",
                         @",SHIPID INTEGER ",
						 @",SHIPNAME TEXT ",
                         @",TYPEID INTEGER ",
                         @",TRADE TEXT ",
                         @",KEYVALUE TEXT ",
                         @",SUPID INTEGER ",
                         @",STATECODE TEXT ",
                         @",elw INTEGER ",
						 @",T_NOTE TEXT ",
                         @",F_NOTE TEXT )"];
	
	if(sqlite3_exec(database,[createSql UTF8String],NULL,NULL,&errorMsg)!=SQLITE_OK)
	{
		sqlite3_close(database);
		NSLog(@"create table VbFactoryTrans error");
		printf("%s",errorMsg);
		return;
		
	}
}

+(void)insert:(VbFactoryTrans*) vbFactoryTrans
{
	NSLog(@"Insert begin VbFactoryTrans");
	const char *insert="INSERT INTO VbFactoryTrans (FACTORYCODE,DISPATCHNO,SHIPID,SHIPNAME,TYPEID, TRADE,KEYVALUE,SUPID,STATECODE,elw,T_NOTE,F_NOTE) values(?,?,?,?,?,?,?,?,?,?,?,?)";
	sqlite3_stmt *statement;
	
	int re=sqlite3_prepare_v2(database, insert, -1, &statement, NULL);
    if (re != SQLITE_OK) 
    {
        NSLog( @"Error: failed to prepare statement with message [%s]  sql[%s]", sqlite3_errmsg(database),insert);
    }
    
    NSLog(@"FACTORYCODE=%@", vbFactoryTrans.FACTORYCODE);
    NSLog(@"DISPATCHNO=%@", vbFactoryTrans.DISPATCHNO);
    NSLog(@"SHIPID=%d", vbFactoryTrans.SHIPID);
    NSLog(@"SHIPNAME=%@", vbFactoryTrans.SHIPNAME);
    NSLog(@"TYPEID=%d", vbFactoryTrans.TYPEID);
    NSLog(@"TRADE=%@", vbFactoryTrans.TRADE);
    NSLog(@"KEYVALUE=%@", vbFactoryTrans.KEYVALUE);
    NSLog(@"SUPID=%d", vbFactoryTrans.SUPID);
    NSLog(@"STATECODE=%@", vbFactoryTrans.STATECODE);
    NSLog(@"elw=%d", vbFactoryTrans.elw);
    NSLog(@"T_NOTE=%@", vbFactoryTrans.T_NOTE);
    NSLog(@"F_NOTE=%@", vbFactoryTrans.F_NOTE);
    
	sqlite3_bind_text(statement, 1, [vbFactoryTrans.FACTORYCODE UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(statement, 2, [vbFactoryTrans.DISPATCHNO UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_int(statement, 3, vbFactoryTrans.SHIPID);
    sqlite3_bind_text(statement, 4, [vbFactoryTrans.SHIPNAME UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_int(statement, 5, vbFactoryTrans.TYPEID);
    sqlite3_bind_text(statement, 6, [vbFactoryTrans.TRADE UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(statement, 7, [vbFactoryTrans.KEYVALUE UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_int(statement, 8, vbFactoryTrans.SUPID);
    sqlite3_bind_text(statement, 9, [vbFactoryTrans.STATECODE UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_int(statement, 10, vbFactoryTrans.elw);
    sqlite3_bind_text(statement, 11, [vbFactoryTrans.T_NOTE UTF8String], -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(statement, 12, [vbFactoryTrans.F_NOTE UTF8String], -1, SQLITE_TRANSIENT);
    
	re=sqlite3_step(statement);
	if(re!=SQLITE_DONE)
	{
		NSLog( @"Error: insert VbFactoryTrans error with message [%s]  sql[%s]", sqlite3_errmsg(database),insert);
		sqlite3_finalize(statement);
		return;
	}	
	sqlite3_finalize(statement);
	return;
}

+(void) delete:(VbFactoryTrans*) vbFactoryTrans
{
	char * errorMsg;
	NSString *deletesql=[NSString stringWithFormat:@"DELETE FROM  VbFactoryTrans where dispatchNo ='%@' ",vbFactoryTrans.FACTORYCODE];
	
	if(sqlite3_exec(database,[deletesql UTF8String],NULL,NULL,&errorMsg)!=SQLITE_OK)
	{
		NSLog( @"Error: delete VbFactoryTrans error with message [%s]  sql[%@]", errorMsg,deletesql);
	}
	else
	{
		NSLog(@"delete success");		
	}
	return;
}
//+(NSMutableArray *) getVbFactoryTransBySql:(NSString *)querySql
//{
//	sqlite3_stmt *statement;
//    NSString *sql=[NSString stringWithFormat:@"SELECT FACTORYCODE,DISPATCHNO,SHIPID,SHIPNAME,TYPEID, TRADE,KEYVALUE,SUPID,STATECODE,elw,T_NOTE,F_NOTE FROM  VbFactoryTrans WHERE %@ ",querySql];
//    NSLog(@"执行 getVbFactoryTransBySql [%@] ",sql);
//    
//	NSMutableArray *array=[[NSMutableArray alloc]init];
//	if(sqlite3_prepare_v2(database,[sql UTF8String],-1,&statement,NULL)==SQLITE_OK){
//		while (sqlite3_step(statement)==SQLITE_ROW) {
//			
//            VbFactoryTrans *vbFactoryTrans=[[VbFactoryTrans alloc] init];
//            
//			char * rowData0=(char *)sqlite3_column_text(statement,0);
//            if (rowData0 == NULL)
//                vbFactoryTrans.FACTORYCODE = nil;
//            else
//                vbFactoryTrans.FACTORYCODE = [NSString stringWithUTF8String: rowData0];
//            
//            char * rowData1=(char *)sqlite3_column_text(statement,1);
//            if (rowData1 == NULL)
//                vbFactoryTrans.DISPATCHNO = nil;
//            else
//                vbFactoryTrans.DISPATCHNO = [NSString stringWithUTF8String: rowData1];
//            
//            vbFactoryTrans.SHIPID = sqlite3_column_int(statement,2);
//
//            char * rowData3=(char *)sqlite3_column_text(statement,3);
//            if (rowData3 == NULL)
//                vbFactoryTrans.SHIPNAME = nil;
//            else
//                vbFactoryTrans.SHIPNAME = [NSString stringWithUTF8String: rowData3];
//            
//            vbFactoryTrans.TYPEID = sqlite3_column_int(statement,4);
//
//            
//            char * rowData5=(char *)sqlite3_column_text(statement,5);
//            if (rowData5 == NULL)
//                vbFactoryTrans.TRADE = nil;
//            else
//                vbFactoryTrans.TRADE = [NSString stringWithUTF8String: rowData5];
//            
//            char * rowData6=(char *)sqlite3_column_text(statement,6);
//            if (rowData6 == NULL)
//                vbFactoryTrans.KEYVALUE = nil;
//            else
//                vbFactoryTrans.KEYVALUE = [NSString stringWithUTF8String: rowData6];
//            
//            vbFactoryTrans.SUPID = sqlite3_column_int(statement,7);
//            
//            char * rowData8=(char *)sqlite3_column_text(statement,8);
//            if (rowData8 == NULL)
//                vbFactoryTrans.STATECODE = nil;
//            else
//                vbFactoryTrans.STATECODE = [NSString stringWithUTF8String: rowData8];
//            
//            vbFactoryTrans.elw = sqlite3_column_int(statement,9);
//            
//            char * rowData10=(char *)sqlite3_column_text(statement,10);
//            if (rowData10 == NULL)
//                vbFactoryTrans.T_NOTE = nil;
//            else
//                vbFactoryTrans.T_NOTE = [NSString stringWithUTF8String: rowData10];
//            
//            char * rowData11=(char *)sqlite3_column_text(statement,11);
//            if (rowData11 == NULL)
//                vbFactoryTrans.F_NOTE = nil;
//            else
//                vbFactoryTrans.F_NOTE = [NSString stringWithUTF8String: rowData11];
//            
//                      
//			[array addObject:vbFactoryTrans];
//            [vbFactoryTrans release];
//		}
//	}else {
//		NSLog( @"Error: select  error message [%s]  sql[%@]", sqlite3_errmsg(database),sql);
//	}
//	return array;
//}

//查询第一层电厂运行情况
+(NSMutableArray *) getVbFactoryTransStateBySql:(NSString *)querySql
{
	sqlite3_stmt *statement;
    NSString *sql=[NSString stringWithFormat:@"SELECT f.FACTORYCODE,f.FACTORYNAME,F.CAPACITYSUM, S.CONSUM,S.AVALIABLE,S.MONTHIMP,S.YEARIMP FROM  TfFactory f,TbFactoryState s WHERE f.factorycode=s.factorycode  %@ ",querySql];
    NSLog(@"执行 getVbFactoryTransStateBySql [%@] ",sql);
    
	NSMutableArray *array=[[NSMutableArray alloc]init];
	if(sqlite3_prepare_v2(database,[sql UTF8String],-1,&statement,NULL)==SQLITE_OK){
		while (sqlite3_step(statement)==SQLITE_ROW) {
			
            VbFactoryTrans *vbFactoryTrans=[[VbFactoryTrans alloc] init];
            
			char * rowData0=(char *)sqlite3_column_text(statement,0);
            if (rowData0 == NULL)
                vbFactoryTrans.FACTORYCODE = nil;
            else
                vbFactoryTrans.FACTORYCODE = [NSString stringWithUTF8String: rowData0];
            
            char * rowData1=(char *)sqlite3_column_text(statement,1);
            if (rowData1 == NULL)
                vbFactoryTrans.DISPATCHNO = nil;
            else
                vbFactoryTrans.FACTORYNAME = [NSString stringWithUTF8String: rowData1];
            
            char * rowData2=(char *)sqlite3_column_text(statement,2);
            if (rowData2 == NULL)
                vbFactoryTrans.CAPACITYSUM = nil;
            else
                vbFactoryTrans.CAPACITYSUM = [NSString stringWithUTF8String: rowData2];
            
            vbFactoryTrans.CONSUM = sqlite3_column_int(statement,3);
            vbFactoryTrans.AVALIABLE = sqlite3_column_int(statement,4);
            vbFactoryTrans.MONTHIMP = sqlite3_column_int(statement,5);
            vbFactoryTrans.YEARIMP = sqlite3_column_int(statement,6);
            
			[array addObject:vbFactoryTrans];
            [vbFactoryTrans release];
		}
	}else {
		NSLog( @"Error: select  error message [%s]  sql[%@]", sqlite3_errmsg(database),sql);
	}
	return array;
}
+(NSMutableArray *) getVbFactoryTrans:(NSMutableArray *)factory 
{
    // NSString *query=[NSString stringWithString:@""];
    int count=0;
    NSMutableString *tmpString = [[NSMutableString alloc] init ];
    //全部选中的情况下不代入查询条件
    if (((TgFactory *)[factory objectAtIndex:0]).didSelected==NO) {
        
        for (int i=0; i<[factory count]; i++) {
            if (((TgFactory *)[factory objectAtIndex:i]).didSelected==YES) {
                count++;
                if (count==1) {
                    [tmpString appendString:@"AND F.FactoryCode in ('"];
                }
                //如果条件不是第一条也不是最后一条
                if ((i!=[factory count]-1)&&count!=1) {
                    [tmpString appendString:@",'"];
                    
                }
                [tmpString appendFormat:@"%@'",((TgFactory *)[factory objectAtIndex:i]).factoryCode];
            }
            
        }
        if (count>0) {
            [tmpString appendString:@")"];
        }
    }
    
    
    
    NSLog(@"tmpString[%@] ",tmpString);
    
	NSMutableArray * array=[VbFactoryTransDao getVbFactoryTransStateBySql:tmpString];
    NSLog(@"执行 getVbFactoryTransStateBySql 数量[%d] ",[array count]);
    [tmpString release];
	return array;
}
@end
